################################################################################
#                                                                              #
#      IAR Universal Linker V4.60I/386                                         #
#                                                                              #
#           Link time     =  15/Mar/2015  14:45:03                             #
#           Target CPU    =  ARM                                               #
#           List file     =  "D:\kl\dev\Embedded Workbench 4.0 Evaluation\Proj #
#                            ect\test_Read-Write_PNG\Release\List\Test_ReadWri #
#                            tePNG.map"                                        #
#           Output file 1 =  "D:\kl\dev\Embedded Workbench 4.0 Evaluation\Proj #
#                            ect\test_Read-Write_PNG\Release\Exe\Test_ReadWrit #
#                            ePNG.elf"                                         #
#                            Format: elf, variant: -ynpra                      #
#           Command line  =  "D:\kl\dev\Embedded Workbench 4.0 Evaluation\Proj #
#                            ect\test_Read-Write_PNG\Release\Obj\_cpp2.r79"    #
#                            "D:\kl\dev\Embedded Workbench 4.0 Evaluation\Proj #
#                            ect\test_Read-Write_PNG\Release\Obj\func.r79"     #
#                            "D:\kl\dev\Embedded Workbench 4.0 Evaluation\Proj #
#                            ect\test_Read-Write_PNG\Release\Obj\main.r79"     #
#                            -o                                                #
#                            "D:\kl\dev\Embedded Workbench 4.0 Evaluation\Proj #
#                            ect\test_Read-Write_PNG\Release\Exe\Test_ReadWrit #
#                            ePNG.elf"                                         #
#                            -Felf -l                                          #
#                            "D:\kl\dev\Embedded Workbench 4.0 Evaluation\Proj #
#                            ect\test_Read-Write_PNG\Release\List\Test_ReadWri #
#                            tePNG.map"                                        #
#                            -xms                                              #
#                            "-ID:\kl\dev\Embedded Workbench 4.0 Evaluation\AR #
#                            M\LIB\"                                           #
#                            -f                                                #
#                            "D:\kl\dev\Embedded Workbench 4.0 Evaluation\Proj #
#                            ect\test_Read-Write_PNG\..\include\1.xcl"         #
#                            (-carm -ynpra -V(CODE)CODE_AREA,12                #
#                            -V(DATA)DATA_AREA,12                              #
#                            -Z(CODE_AREA)ELFBEGIN,DATA_ID,START,CODE,DATA_C,I #
#                            NITTAB,DATA_Z,DATA_N,CONFIG_C,DYN_CONST,DYN_CONST #
#                            _DESC,DYN_PAGE,DYN_PAGE_DESC=0-FFFFFFFF           #
#                            -Z(DATA_AREA)DATA_I=0-FFFFFFFF)                   #
#                            "D:\kl\dev\Embedded Workbench 4.0 Evaluation\ARM\ #
#                            LIB\dl5tpainl8n.r79"                              #
#                            -s main                                           #
#                                                                              #
#                        Copyright 1987-2007 IAR Systems. All rights reserved. #
################################################################################





                ****************************************
                *                                      *
                *           CROSS REFERENCE            *
                *                                      *
                ****************************************

       Program entry at : CODE_AREA 000000E8  Relocatable, from module : main




                ****************************************
                *                                      *
                *            RUNTIME MODEL             *
                *                                      *
                ****************************************

  ARMv4M                 = USED
  ARMv4T                 = USED
  ARMv5T                 = USED
  StackAlign4            = USED
  __cpu_mode             = __pcs__interwork
  __data_model           = absolute
  __dlib_file_descriptor = 1
  __endian               = little
  __rt_version           = 6



                ****************************************
                *                                      *
                *              MODULE MAP              *
                *                                      *
                ****************************************


  DEFINED ABSOLUTE ENTRIES
    *************************************************************************

  DEFINED ABSOLUTE ENTRIES
    *************************************************************************

  FILE NAME : D:\kl\dev\Embedded Workbench 4.0 Evaluation\Project\test_Read-Write_PNG\Release\Obj\_cpp2.r79
    *************************************************************************

  FILE NAME : D:\kl\dev\Embedded Workbench 4.0 Evaluation\Project\test_Read-Write_PNG\Release\Obj\func.r79
  PROGRAM MODULE, NAME : func

  SEGMENTS IN THE MODULE
  ======================
ELFBEGIN
  Relative segment, address: CODE_AREA 00000000, align: 0
  Segment part 0. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ELF_BEGIN               00000000        elf_exit() (main)
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000000 - 00000017 (0x18 bytes), align: 2
  Segment part 1. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           kill_data               00000000        elf_exit() (main)
           seqkill                 00000004 
           ASYNC                   00000014 
           SYNC                    00000010 
    -------------------------------------------------------------------------
DYN_CONST_DESC
  Relative segment, address: CODE_AREA 00000EB0 - 00000EB3 (0x4 bytes), align: 2
  Segment part 681. ROOT.
    -------------------------------------------------------------------------
DYN_PAGE
  Relative segment, address: CODE_AREA 00000EB4, align: 2
  Segment part 682.
    -------------------------------------------------------------------------
DYN_PAGE_DESC
  Relative segment, address: CODE_AREA 00000EB4 - 00000EB7 (0x4 bytes), align: 2
  Segment part 683. ROOT.

    *************************************************************************

  FILE NAME : D:\kl\dev\Embedded Workbench 4.0 Evaluation\Project\test_Read-Write_PNG\Release\Obj\main.r79
  PROGRAM MODULE, NAME : main

  SEGMENTS IN THE MODULE
  ======================
DATA_Z
  Relative segment, address: CODE_AREA 00000E94 - 00000EAF (0x1c bytes), align: 2
  Segment part 7.             Intra module refs:   ReadWrite(wchar_t *, wchar_t *, wchar_t *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           dll                     00000E98 
           info_read_ptr           00000EA0 
           info_write_ptr          00000EA8 
           png_read_ptr            00000E9C 
           png_write_ptr           00000EA4 
           row_pointers            00000EAC 
           y                       00000E94 
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000018 - 00000083 (0x6c bytes), align: 2
  Segment part 13.            Intra module refs:   ReadWrite(wchar_t *, wchar_t *, wchar_t *)
                                                   main
                                                   png_user_write(png_structp, png_bytep, size_t)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           log(char *)             00000018 
               stack 1 = 00000000 ( 00000264 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000084 - 0000009F (0x1c bytes), align: 2
  Segment part 15.            Intra module refs:   main
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           elf_exit()              00000084 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000000A0 - 000000B3 (0x14 bytes), align: 2
  Segment part 17.            Intra module refs:   ReadWrite(wchar_t *, wchar_t *, wchar_t *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           png_user_read(png_structp, png_bytep, size_t)
                                   000000A0 
               stack 1 = 00000000 ( 00000004 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000000B4 - 000000E7 (0x34 bytes), align: 2
  Segment part 19.            Intra module refs:   ReadWrite(wchar_t *, wchar_t *, wchar_t *)
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           png_user_write(png_structp, png_bytep, size_t)
                                   000000B4 
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 000000E8 - 00000297 (0x1b0 bytes), align: 2
  Segment part 21.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           main                    000000E8        Absolute parts (?ABS_ENTRY_MOD)
               stack 1 = 00000000 ( 00000010 )
    -------------------------------------------------------------------------
CODE
  Relative segment, address: CODE_AREA 00000298 - 000007C7 (0x530 bytes), align: 2
  Segment part 23.            Intra module refs:   main
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ReadWrite(wchar_t *, wchar_t *, wchar_t *)
                                   00000298 
               stack 1 = 00000000 ( 00000088 )
    -------------------------------------------------------------------------
INITTAB
  Relative segment, address: CODE_AREA 00000E88 - 00000E93 (0xc bytes), align: 2
  Segment part 25. ROOT.
           ENTRY                   ADDRESS         REF BY
           =====                   =======         ======
           ?init?tab?DATA_Z        00000E88 
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 000007C8 - 0000080B (0x44 bytes), align: 2
  Segment part 2.             Intra module refs:   log(char *)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 0000080C - 00000B0F (0x304 bytes), align: 2
  Segment part 3.             Intra module refs:   ReadWrite(wchar_t *, wchar_t *, wchar_t *)
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 00000B10 - 00000E77 (0x368 bytes), align: 2
  Segment part 4.             Intra module refs:   main
    -------------------------------------------------------------------------
DATA_C
  Relative segment, address: CODE_AREA 00000E78 - 00000E87 (0x10 bytes), align: 2
  Segment part 5.             Intra module refs:   png_user_write(png_structp, png_bytep, size_t)




                ****************************************
                *                                      *
                *      SEGMENTS IN ADDRESS ORDER       *
                *                                      *
                ****************************************


SEGMENT              SPACE    START ADDRESS   END ADDRESS     SIZE  TYPE  ALIGN
=======              =====    =============   ===========     ====  ====  =====
DATA_ID              CODE_AREA           00000000                     dse    0
START                CODE_AREA           00000000                     dse    0
ELFBEGIN             CODE_AREA           00000000                     rel    0
CODE                 CODE_AREA      00000000 - 000007C7         7C8   rel    2
DATA_C               CODE_AREA      000007C8 - 00000E87         6C0   rel    2
INITTAB              CODE_AREA      00000E88 - 00000E93           C   rel    2
DATA_Z               CODE_AREA      00000E94 - 00000EAF          1C   rel    2
CONFIG_C             CODE_AREA           00000EB0                     dse    0
DYN_CONST            CODE_AREA           00000EB0                     dse    0
DATA_N               CODE_AREA           00000EB0                     dse    0
DYN_CONST_DESC       CODE_AREA      00000EB0 - 00000EB3           4   rel    2
DYN_PAGE             CODE_AREA           00000EB4                     rel    2
DYN_PAGE_DESC        CODE_AREA      00000EB4 - 00000EB7           4   rel    2

                ****************************************
                *                                      *
                *        END OF CROSS REFERENCE        *
                *                                      *
                ****************************************

 3 768 bytes of CODE memory

Errors: none
Warnings: none

